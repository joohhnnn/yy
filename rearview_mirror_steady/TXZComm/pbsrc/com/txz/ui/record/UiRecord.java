// Generated by the protocol buffer compiler.  DO NOT EDIT!

package com.txz.ui.record;

@SuppressWarnings("hiding")
public interface UiRecord {
  
  // enum SubEventId
  public static final int SUBEVENT_PB3_ZERO = 0;
  public static final int SUBEVENT_BEGIN_SAVE_RECORD = 1;
  public static final int SUBEVENT_END_SAVE_RECORD = 2;
  public static final int SUBEVENT_TRIGGER_KEYWORDS = 3;
  
  // enum RecordType
  public static final int RECORD_TYPE_ZERO = 0;
  public static final int RECORD_TYPE_WAKEUP_KW = 1;
  public static final int RECORD_TYPE_WAKEUP_CMD = 2;
  public static final int RECORD_TYPE_CLICK = 3;
  public static final int RECORD_TYPE_TRIGGER_KW = 4;
  public static final int RECORD_TYPE_ASR = 5;
  public static final int RECORD_TYPE_TIME = 6;
  
  // enum SignalType
  public static final int SIGNAL_TYPE_ZERO = 0;
  public static final int SIGNAL_TYPE_REFER = 1;
  public static final int SIGNAL_TYPE_AEC = 2;
  public static final int SIGNAL_TYPE_INNER = 3;
  public static final int SIGNAL_TYPE_RAW = 5;
  
  public static final class RecordData extends
      com.google.protobuf.nano.MessageNano {
    
    private static volatile RecordData[] _emptyArray;
    public static RecordData[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new RecordData[0];
          }
        }
      }
      return _emptyArray;
    }
    
    // optional uint64 uint64_record_time = 1;
    public java.lang.Long uint64RecordTime;
    
    // optional bool bool_record_time = 2;
    public java.lang.Boolean boolRecordTime;
    
    // optional uint32 uint32_record_type = 3;
    public java.lang.Integer uint32RecordType;
    
    // optional uint32 uint32_sample_rate = 4;
    public java.lang.Integer uint32SampleRate;
    
    // optional uint32 uint32_signal_type = 5;
    public java.lang.Integer uint32SignalType;
    
    // optional bytes bytes_record_result = 6;
    public byte[] bytesRecordResult;
    
    // optional uint32 uint32_uid = 7;
    public java.lang.Integer uint32Uid;
    
    // optional uint32 uint32_filter_noise_type = 8;
    public java.lang.Integer uint32FilterNoiseType;
    
    public RecordData() {
      clear();
    }
    
    public RecordData clear() {
      uint64RecordTime = null;
      boolRecordTime = null;
      uint32RecordType = null;
      uint32SampleRate = null;
      uint32SignalType = null;
      bytesRecordResult = null;
      uint32Uid = null;
      uint32FilterNoiseType = null;
      cachedSize = -1;
      return this;
    }
    
    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.uint64RecordTime != null) {
        output.writeUInt64(1, this.uint64RecordTime);
      }
      if (this.boolRecordTime != null) {
        output.writeBool(2, this.boolRecordTime);
      }
      if (this.uint32RecordType != null) {
        output.writeUInt32(3, this.uint32RecordType);
      }
      if (this.uint32SampleRate != null) {
        output.writeUInt32(4, this.uint32SampleRate);
      }
      if (this.uint32SignalType != null) {
        output.writeUInt32(5, this.uint32SignalType);
      }
      if (this.bytesRecordResult != null) {
        output.writeBytes(6, this.bytesRecordResult);
      }
      if (this.uint32Uid != null) {
        output.writeUInt32(7, this.uint32Uid);
      }
      if (this.uint32FilterNoiseType != null) {
        output.writeUInt32(8, this.uint32FilterNoiseType);
      }
      super.writeTo(output);
    }
    
    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.uint64RecordTime != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeUInt64Size(1, this.uint64RecordTime);
      }
      if (this.boolRecordTime != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(2, this.boolRecordTime);
      }
      if (this.uint32RecordType != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeUInt32Size(3, this.uint32RecordType);
      }
      if (this.uint32SampleRate != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeUInt32Size(4, this.uint32SampleRate);
      }
      if (this.uint32SignalType != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeUInt32Size(5, this.uint32SignalType);
      }
      if (this.bytesRecordResult != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBytesSize(6, this.bytesRecordResult);
      }
      if (this.uint32Uid != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeUInt32Size(7, this.uint32Uid);
      }
      if (this.uint32FilterNoiseType != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeUInt32Size(8, this.uint32FilterNoiseType);
      }
      return size;
    }
    
    @Override
    public RecordData mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            this.uint64RecordTime = input.readUInt64();
            break;
          }
          case 16: {
            this.boolRecordTime = input.readBool();
            break;
          }
          case 24: {
            this.uint32RecordType = input.readUInt32();
            break;
          }
          case 32: {
            this.uint32SampleRate = input.readUInt32();
            break;
          }
          case 40: {
            this.uint32SignalType = input.readUInt32();
            break;
          }
          case 50: {
            this.bytesRecordResult = input.readBytes();
            break;
          }
          case 56: {
            this.uint32Uid = input.readUInt32();
            break;
          }
          case 64: {
            this.uint32FilterNoiseType = input.readUInt32();
            break;
          }
        }
      }
    }
    
    public static RecordData parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new RecordData(), data);
    }
    
    public static RecordData parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new RecordData().mergeFrom(input);
    }
  }
  
  public static final class TriggerKw extends
      com.google.protobuf.nano.MessageNano {
    
    private static volatile TriggerKw[] _emptyArray;
    public static TriggerKw[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new TriggerKw[0];
          }
        }
      }
      return _emptyArray;
    }
    
    // optional bytes bytes_trigger_kws = 1;
    public byte[] bytesTriggerKws;
    
    public TriggerKw() {
      clear();
    }
    
    public TriggerKw clear() {
      bytesTriggerKws = null;
      cachedSize = -1;
      return this;
    }
    
    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.bytesTriggerKws != null) {
        output.writeBytes(1, this.bytesTriggerKws);
      }
      super.writeTo(output);
    }
    
    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.bytesTriggerKws != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBytesSize(1, this.bytesTriggerKws);
      }
      return size;
    }
    
    @Override
    public TriggerKw mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            this.bytesTriggerKws = input.readBytes();
            break;
          }
        }
      }
    }
    
    public static TriggerKw parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new TriggerKw(), data);
    }
    
    public static TriggerKw parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new TriggerKw().mergeFrom(input);
    }
  }
  
  public static final class RecordTime extends
      com.google.protobuf.nano.MessageNano {
    
    private static volatile RecordTime[] _emptyArray;
    public static RecordTime[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new RecordTime[0];
          }
        }
      }
      return _emptyArray;
    }
    
    // optional uint64 uint64_start_time = 1;
    public java.lang.Long uint64StartTime;
    
    // optional uint32 uint32_duration = 2;
    public java.lang.Integer uint32Duration;
    
    public RecordTime() {
      clear();
    }
    
    public RecordTime clear() {
      uint64StartTime = null;
      uint32Duration = null;
      cachedSize = -1;
      return this;
    }
    
    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.uint64StartTime != null) {
        output.writeUInt64(1, this.uint64StartTime);
      }
      if (this.uint32Duration != null) {
        output.writeUInt32(2, this.uint32Duration);
      }
      super.writeTo(output);
    }
    
    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.uint64StartTime != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeUInt64Size(1, this.uint64StartTime);
      }
      if (this.uint32Duration != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeUInt32Size(2, this.uint32Duration);
      }
      return size;
    }
    
    @Override
    public RecordTime mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            this.uint64StartTime = input.readUInt64();
            break;
          }
          case 16: {
            this.uint32Duration = input.readUInt32();
            break;
          }
        }
      }
    }
    
    public static RecordTime parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new RecordTime(), data);
    }
    
    public static RecordTime parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new RecordTime().mergeFrom(input);
    }
  }
}
