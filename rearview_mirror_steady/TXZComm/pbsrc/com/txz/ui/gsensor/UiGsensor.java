// Generated by the protocol buffer compiler.  DO NOT EDIT!

package com.txz.ui.gsensor;

@SuppressWarnings("hiding")
public interface UiGsensor {
  
  public static final class GSensorDataList extends
      com.google.protobuf.nano.MessageNano {
    
    private static volatile GSensorDataList[] _emptyArray;
    public static GSensorDataList[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new GSensorDataList[0];
          }
        }
      }
      return _emptyArray;
    }
    
    // repeated .com.txz.ui.gsensor.GSensorData rpt_gsensor_data = 1;
    public com.txz.ui.gsensor.UiGsensor.GSensorData[] rptGsensorData;
    
    public GSensorDataList() {
      clear();
    }
    
    public GSensorDataList clear() {
      rptGsensorData = com.txz.ui.gsensor.UiGsensor.GSensorData.emptyArray();
      cachedSize = -1;
      return this;
    }
    
    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.rptGsensorData != null && this.rptGsensorData.length > 0) {
        for (int i = 0; i < this.rptGsensorData.length; i++) {
          com.txz.ui.gsensor.UiGsensor.GSensorData element = this.rptGsensorData[i];
          if (element != null) {
            output.writeMessage(1, element);
          }
        }
      }
      super.writeTo(output);
    }
    
    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.rptGsensorData != null && this.rptGsensorData.length > 0) {
        for (int i = 0; i < this.rptGsensorData.length; i++) {
          com.txz.ui.gsensor.UiGsensor.GSensorData element = this.rptGsensorData[i];
          if (element != null) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeMessageSize(1, element);
          }
        }
      }
      return size;
    }
    
    @Override
    public GSensorDataList mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 10);
            int i = this.rptGsensorData == null ? 0 : this.rptGsensorData.length;
            com.txz.ui.gsensor.UiGsensor.GSensorData[] newArray =
                new com.txz.ui.gsensor.UiGsensor.GSensorData[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.rptGsensorData, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new com.txz.ui.gsensor.UiGsensor.GSensorData();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new com.txz.ui.gsensor.UiGsensor.GSensorData();
            input.readMessage(newArray[i]);
            this.rptGsensorData = newArray;
            break;
          }
        }
      }
    }
    
    public static GSensorDataList parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new GSensorDataList(), data);
    }
    
    public static GSensorDataList parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new GSensorDataList().mergeFrom(input);
    }
  }
  
  public static final class GSensorData extends
      com.google.protobuf.nano.MessageNano {
    
    private static volatile GSensorData[] _emptyArray;
    public static GSensorData[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new GSensorData[0];
          }
        }
      }
      return _emptyArray;
    }
    
    // optional double double_axis_x = 1;
    public java.lang.Double doubleAxisX;
    
    // optional double double_axis_y = 2;
    public java.lang.Double doubleAxisY;
    
    // optional double double_axis_z = 3;
    public java.lang.Double doubleAxisZ;
    
    // optional uint64 uint64_collect_time = 4;
    public java.lang.Long uint64CollectTime;
    
    // optional bool bool_confidence = 5;
    public java.lang.Boolean boolConfidence;
    
    public GSensorData() {
      clear();
    }
    
    public GSensorData clear() {
      doubleAxisX = null;
      doubleAxisY = null;
      doubleAxisZ = null;
      uint64CollectTime = null;
      boolConfidence = null;
      cachedSize = -1;
      return this;
    }
    
    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.doubleAxisX != null) {
        output.writeDouble(1, this.doubleAxisX);
      }
      if (this.doubleAxisY != null) {
        output.writeDouble(2, this.doubleAxisY);
      }
      if (this.doubleAxisZ != null) {
        output.writeDouble(3, this.doubleAxisZ);
      }
      if (this.uint64CollectTime != null) {
        output.writeUInt64(4, this.uint64CollectTime);
      }
      if (this.boolConfidence != null) {
        output.writeBool(5, this.boolConfidence);
      }
      super.writeTo(output);
    }
    
    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.doubleAxisX != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeDoubleSize(1, this.doubleAxisX);
      }
      if (this.doubleAxisY != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeDoubleSize(2, this.doubleAxisY);
      }
      if (this.doubleAxisZ != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeDoubleSize(3, this.doubleAxisZ);
      }
      if (this.uint64CollectTime != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeUInt64Size(4, this.uint64CollectTime);
      }
      if (this.boolConfidence != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(5, this.boolConfidence);
      }
      return size;
    }
    
    @Override
    public GSensorData mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 9: {
            this.doubleAxisX = input.readDouble();
            break;
          }
          case 17: {
            this.doubleAxisY = input.readDouble();
            break;
          }
          case 25: {
            this.doubleAxisZ = input.readDouble();
            break;
          }
          case 32: {
            this.uint64CollectTime = input.readUInt64();
            break;
          }
          case 40: {
            this.boolConfidence = input.readBool();
            break;
          }
        }
      }
    }
    
    public static GSensorData parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new GSensorData(), data);
    }
    
    public static GSensorData parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new GSensorData().mergeFrom(input);
    }
  }
}
