// Generated by the protocol buffer compiler.  DO NOT EDIT!

package com.txz.ui.platform;

@SuppressWarnings("hiding")
public interface UiPlatform {
  
  // enum SubEvent
  public static final int SUBEVENT_POWER_ACTION_DEFAULT = 0;
  public static final int SUBEVENT_POWER_ACTION_POWER_ON = 1;
  public static final int SUBEVENT_POWER_ACTION_BEFORE_SLEEP = 2;
  public static final int SUBEVENT_POWER_ACTION_SLEEP = 3;
  public static final int SUBEVENT_POWER_ACTION_WAKEUP = 4;
  public static final int SUBEVENT_POWER_ACTION_BEFORE_POWER_OFF = 5;
  public static final int SUBEVENT_POWER_ACTION_POWER_OFF = 6;
  public static final int SUBEVENT_POWER_ACTION_SHOCK_WAKEUP = 7;
  public static final int SUBEVENT_TXZ_APP_BEFORE_EXIT = 100;
  public static final int SUBEVENT_SCAN_REQ = 1000;
  public static final int SUBEVENT_SCAN_CANCEL = 1001;
  public static final int SUBEVENT_SCAN_RES = 1002;
  public static final int SUBEVENT_SCAN_PROC_TASK = 1003;
  
  public static final class ReqScan extends
      com.google.protobuf.nano.MessageNano {
    
    private static volatile ReqScan[] _emptyArray;
    public static ReqScan[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new ReqScan[0];
          }
        }
      }
      return _emptyArray;
    }
    
    // optional bytes str_task_id = 1;
    public byte[] strTaskId;
    
    // repeated bytes rpt_str_roots = 2;
    public byte[][] rptStrRoots;
    
    // optional bytes str_black_dir_regex = 3;
    public byte[] strBlackDirRegex;
    
    // optional bytes str_white_dir_regex = 4;
    public byte[] strWhiteDirRegex;
    
    // optional bytes str_black_dir_contains_regex = 5;
    public byte[] strBlackDirContainsRegex;
    
    // optional bytes str_white_dir_contains_regex = 6;
    public byte[] strWhiteDirContainsRegex;
    
    // optional bytes str_black_file_regex = 7;
    public byte[] strBlackFileRegex;
    
    // optional bytes str_white_file_regex = 8;
    public byte[] strWhiteFileRegex;
    
    public ReqScan() {
      clear();
    }
    
    public ReqScan clear() {
      strTaskId = null;
      rptStrRoots = com.google.protobuf.nano.WireFormatNano.EMPTY_BYTES_ARRAY;
      strBlackDirRegex = null;
      strWhiteDirRegex = null;
      strBlackDirContainsRegex = null;
      strWhiteDirContainsRegex = null;
      strBlackFileRegex = null;
      strWhiteFileRegex = null;
      cachedSize = -1;
      return this;
    }
    
    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.strTaskId != null) {
        output.writeBytes(1, this.strTaskId);
      }
      if (this.rptStrRoots != null && this.rptStrRoots.length > 0) {
        for (int i = 0; i < this.rptStrRoots.length; i++) {
          byte[] element = this.rptStrRoots[i];
          if (element != null) {
            output.writeBytes(2, element);
          }
        }
      }
      if (this.strBlackDirRegex != null) {
        output.writeBytes(3, this.strBlackDirRegex);
      }
      if (this.strWhiteDirRegex != null) {
        output.writeBytes(4, this.strWhiteDirRegex);
      }
      if (this.strBlackDirContainsRegex != null) {
        output.writeBytes(5, this.strBlackDirContainsRegex);
      }
      if (this.strWhiteDirContainsRegex != null) {
        output.writeBytes(6, this.strWhiteDirContainsRegex);
      }
      if (this.strBlackFileRegex != null) {
        output.writeBytes(7, this.strBlackFileRegex);
      }
      if (this.strWhiteFileRegex != null) {
        output.writeBytes(8, this.strWhiteFileRegex);
      }
      super.writeTo(output);
    }
    
    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.strTaskId != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBytesSize(1, this.strTaskId);
      }
      if (this.rptStrRoots != null && this.rptStrRoots.length > 0) {
        int dataCount = 0;
        int dataSize = 0;
        for (int i = 0; i < this.rptStrRoots.length; i++) {
          byte[] element = this.rptStrRoots[i];
          if (element != null) {
            dataCount++;
            dataSize += com.google.protobuf.nano.CodedOutputByteBufferNano
                .computeBytesSizeNoTag(element);
          }
        }
        size += dataSize;
        size += 1 * dataCount;
      }
      if (this.strBlackDirRegex != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBytesSize(3, this.strBlackDirRegex);
      }
      if (this.strWhiteDirRegex != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBytesSize(4, this.strWhiteDirRegex);
      }
      if (this.strBlackDirContainsRegex != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBytesSize(5, this.strBlackDirContainsRegex);
      }
      if (this.strWhiteDirContainsRegex != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBytesSize(6, this.strWhiteDirContainsRegex);
      }
      if (this.strBlackFileRegex != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBytesSize(7, this.strBlackFileRegex);
      }
      if (this.strWhiteFileRegex != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBytesSize(8, this.strWhiteFileRegex);
      }
      return size;
    }
    
    @Override
    public ReqScan mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            this.strTaskId = input.readBytes();
            break;
          }
          case 18: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 18);
            int i = this.rptStrRoots == null ? 0 : this.rptStrRoots.length;
            byte[][] newArray = new byte[i + arrayLength][];
            if (i != 0) {
              java.lang.System.arraycopy(this.rptStrRoots, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = input.readBytes();
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = input.readBytes();
            this.rptStrRoots = newArray;
            break;
          }
          case 26: {
            this.strBlackDirRegex = input.readBytes();
            break;
          }
          case 34: {
            this.strWhiteDirRegex = input.readBytes();
            break;
          }
          case 42: {
            this.strBlackDirContainsRegex = input.readBytes();
            break;
          }
          case 50: {
            this.strWhiteDirContainsRegex = input.readBytes();
            break;
          }
          case 58: {
            this.strBlackFileRegex = input.readBytes();
            break;
          }
          case 66: {
            this.strWhiteFileRegex = input.readBytes();
            break;
          }
        }
      }
    }
    
    public static ReqScan parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new ReqScan(), data);
    }
    
    public static ReqScan parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new ReqScan().mergeFrom(input);
    }
  }
  
  public static final class ResScan extends
      com.google.protobuf.nano.MessageNano {
    
    private static volatile ResScan[] _emptyArray;
    public static ResScan[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new ResScan[0];
          }
        }
      }
      return _emptyArray;
    }
    
    // optional uint32 uint32_session_id = 1;
    public java.lang.Integer uint32SessionId;
    
    // optional bytes str_task_id = 2;
    public byte[] strTaskId;
    
    // repeated bytes str_result = 3;
    public byte[][] strResult;
    
    public ResScan() {
      clear();
    }
    
    public ResScan clear() {
      uint32SessionId = null;
      strTaskId = null;
      strResult = com.google.protobuf.nano.WireFormatNano.EMPTY_BYTES_ARRAY;
      cachedSize = -1;
      return this;
    }
    
    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.uint32SessionId != null) {
        output.writeUInt32(1, this.uint32SessionId);
      }
      if (this.strTaskId != null) {
        output.writeBytes(2, this.strTaskId);
      }
      if (this.strResult != null && this.strResult.length > 0) {
        for (int i = 0; i < this.strResult.length; i++) {
          byte[] element = this.strResult[i];
          if (element != null) {
            output.writeBytes(3, element);
          }
        }
      }
      super.writeTo(output);
    }
    
    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.uint32SessionId != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeUInt32Size(1, this.uint32SessionId);
      }
      if (this.strTaskId != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBytesSize(2, this.strTaskId);
      }
      if (this.strResult != null && this.strResult.length > 0) {
        int dataCount = 0;
        int dataSize = 0;
        for (int i = 0; i < this.strResult.length; i++) {
          byte[] element = this.strResult[i];
          if (element != null) {
            dataCount++;
            dataSize += com.google.protobuf.nano.CodedOutputByteBufferNano
                .computeBytesSizeNoTag(element);
          }
        }
        size += dataSize;
        size += 1 * dataCount;
      }
      return size;
    }
    
    @Override
    public ResScan mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            this.uint32SessionId = input.readUInt32();
            break;
          }
          case 18: {
            this.strTaskId = input.readBytes();
            break;
          }
          case 26: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 26);
            int i = this.strResult == null ? 0 : this.strResult.length;
            byte[][] newArray = new byte[i + arrayLength][];
            if (i != 0) {
              java.lang.System.arraycopy(this.strResult, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = input.readBytes();
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = input.readBytes();
            this.strResult = newArray;
            break;
          }
        }
      }
    }
    
    public static ResScan parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new ResScan(), data);
    }
    
    public static ResScan parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new ResScan().mergeFrom(input);
    }
  }
}
