apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao'
//apply plugin: 'com.ceabie.dexnkife'
android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    aaptOptions.cruncherEnabled = false
    aaptOptions.useNewCruncher = false
    useLibrary 'org.apache.http.legacy'


    defaultConfig {
        applicationId "com.txznet.music"//kaola netease 资源
        minSdkVersion 19
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 40208
        versionName "4.2.8"
        multiDexEnabled true
//        multiDexKeepFile file('dexKnife.txt')
        multiDexKeepProguard file('dexKnife.txt')
    }

    signingConfigs {
        release {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file('../../tools/txz.keystore')
            storePassword 'android'
        }
    }
    packagingOptions {
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }
    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            debuggable true

            buildConfigField "String", "CODE_VERSION", "\"${getSvnRevision()}\""
            buildConfigField "String", "BUILD_TIME", "\"${getTime()}\""
        }
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            shrinkResources true
            debuggable false
            jniDebuggable false
            zipAlignEnabled true
            proguardFiles 'proguard-project.txt'
//            multiDexKeepFile 'dexknife.txt'

            buildConfigField "String", "CODE_VERSION", "\"${getSvnRevision()}\""
            buildConfigField "String", "BUILD_TIME", "\"${getTime()}\""
        }

        applicationVariants.all { variant ->
            // 只copy开启了混淆的版本至输出目录
            if (variant.buildType.isMinifyEnabled()) {
                def name = "TXZMusic" + "_${variant.buildType.name}_${defaultConfig.versionName}(${getSvnRevision()})_${getTime()}"
                variant.outputs.each { output ->
                    if (null != output.outputFile && output.outputFile.name.endsWith('.apk')) {
                        variant.assemble.doLast {
                            copy {
                                from(output.outputFile, variant.mappingFile.path)
                                into "${projectDir}/outputs"

                                rename { String fileName ->
                                    if (fileName.endsWith('.apk')) {
                                        "${name}.apk"
                                    } else {
                                        "${name}.txt"
                                    }
                                }
                            }
                        }
                    }

                }
            }
        }


    }
    sourceSets {
        main {

            assets.srcDirs = ['assets']

            resources.srcDirs = ['src']
            jni.srcDirs = []
            jniLibs.srcDirs = ['libs']

        }
        test {
            java.srcDirs = ['testsrc']
        }
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

greendao {
    schemaVersion 12
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    // Required -- JUnit 4 framework
    testImplementation 'junit:junit:4.12'
    // Optional -- Mockito framework
    testImplementation 'org.mockito:mockito-core:1.10.19'
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.5.1'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'
    implementation 'com.google.code.gson:gson:2.7'
    implementation 'com.github.Aspsine:SwipeToLoadLayout:1.0.4'
    implementation 'org.greenrobot:greendao:3.2.0'
    implementation 'com.dinuscxj:recycleritemdecoration:1.0.0'
    implementation project(':TXZComm')

    //高斯模糊
    implementation 'jp.wasabeef:glide-transformations:3.0.1'
    implementation 'com.github.bumptech.glide:glide:4.1.1'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.1.1'

    implementation 'de.hdodenhof:circleimageview:2.1.0'
    implementation 'com.github.gabrielemariotti.recyclerview:recyclerview-animators:0.3.0-SNAPSHOT@aar'




    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.8.0'
    implementation 'com.squareup.okhttp3:okhttp:3.8.0'


    implementation "com.jakewharton:butterknife:$rootProject.ext.butterKnifeVersion"
    annotationProcessor "com.jakewharton:butterknife:$rootProject.ext.butterKnifeVersion"
    implementation "io.reactivex.rxjava2:rxjava:$rootProject.ext.RxJavaVersion"
    implementation "io.reactivex.rxjava2:rxandroid:$rootProject.ext.RxAndroidVersion"

    implementation 'com.android.support:multidex:1.0.1'

    implementation googleSupport()
//    compile 'junit:junit:4.12'

    implementation 'tv.danmaku.ijk.media:ijkplayer-java:0.8.8'
    implementation 'tv.danmaku.ijk.media:ijkplayer-armv7a:0.8.8'
}

def googleSupport() {
    [
            "com.android.support:appcompat-v7:$rootProject.ext.supportLibraryVersion",
            "com.android.support:support-v4:$rootProject.ext.supportLibraryVersion",
            "com.android.support:recyclerview-v7:$rootProject.ext.supportLibraryVersion",
            "com.android.support:support-annotations:$rootProject.ext.supportLibraryVersion",
            "com.android.support:design:$rootProject.ext.supportLibraryVersion",
            "com.android.support:cardview-v7:$rootProject.ext.supportLibraryVersion",
            "com.android.support:percent:$rootProject.ext.supportLibraryVersion",
    ]
}

def getSvnRevision() {
    return 001
//    new ByteArrayOutputStream().withStream { os ->
//        def result = exec {
//            executable = 'svn'
//            args = ['info']
//            standardOutput = os
//        }
//        def outputAsString = os.toString()
//        def matchLastChangedRev = outputAsString =~ /Last Changed Rev: (\d+)/
//
//        ext.svnRev = "${matchLastChangedRev[0][1]}".toInteger()
//    }
//    return svnRev
}

def getTime() {
    return new Date().format("yyyyMMddHHmm")
}

import java.util.HashMap;

clean << {
    println("com.txznet.test::time is :$rootDir")
}

task(yugangshuo).doLast {
    println "start execute yuangshuo"
    havefun()
}

def havefun() {
    def file = new File("com.txznet.test.txt")
    if (!file)
        file.createNewFile()
    file.write("goodjob\r\njobgood")
    file.eachLine { first, second -> println "${second} ${first}" }
//    file.eachLine { line, lineNo ->
//        println "${lineNo} ${line}"
//    }
}

//class TimingsListener implements TaskExecutionListener, BuildListener {
//    private Clock clock
//    private timings = []
//
//    @Override
//    void beforeExecute(Task task) {
//        clock = new org.gradle.util.Clock()
//    }
//
//    @Override
//    void afterExecute(Task task, TaskState taskState) {
//        def ms = clock.timeInMs
//        timings.add([ms, task.path])
//        task.project.logger.warn "${task.path} took ${ms}ms"
//    }
//
//    @Override
//    void buildFinished(BuildResult result) {
//        println "Task timings:"
//        for (timing in timings) {
//            if (timing[0] >= 50) {
//                printf "%7sms  %s\n", timing
//            }
//        }
//    }
//
//    @Override
//    void buildStarted(Gradle gradle) {}
//
//    @Override
//    void projectsEvaluated(Gradle gradle) {}
//
//    @Override
//    void projectsLoaded(Gradle gradle) {}
//
//    @Override
//    void settingsEvaluated(Settings settings) {}
//}

afterEvaluate {

    tasks.matching {

        it.name.startsWith('dex')

    }.each { dx ->

        if (dx.additionalParameters == null) {

            dx.additionalParameters = ['--multi-dex']

        } else {

            dx.additionalParameters += '--multi-dex'

        }

    }

}

//gradle.addListener new TimingsListener()